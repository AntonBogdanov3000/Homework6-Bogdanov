<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Shift_Jmeter_Homework">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="iteration">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">2</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name"></stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept-Charset:</stringProp>
              <stringProp name="Header.value">utf-8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="baseUrl" elementType="Argument">
              <stringProp name="Argument.name">baseUrl</stringProp>
              <stringProp name="Argument.value">//petstore.swagger.io/v2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="randomUserId" elementType="Argument">
              <stringProp name="Argument.name">randomUserId</stringProp>
              <stringProp name="Argument.value">${__Random(1,100)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="randomName" elementType="Argument">
              <stringProp name="Argument.name">randomName</stringProp>
              <stringProp name="Argument.value">${__RandomString(5,abcdefghijklmnop,randomString)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="randomFirstname" elementType="Argument">
              <stringProp name="Argument.name">randomFirstname</stringProp>
              <stringProp name="Argument.value">${__RandomString(7,abcdefghijklmnop,randomString)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="randomLastname" elementType="Argument">
              <stringProp name="Argument.name">randomLastname</stringProp>
              <stringProp name="Argument.value">${__RandomString(10,abcdefghijklmnop,randomString)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="randomEmail" elementType="Argument">
              <stringProp name="Argument.name">randomEmail</stringProp>
              <stringProp name="Argument.value">${__RandomString(6,abcdefghijklmnop,)}@gmail.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="randomPassword" elementType="Argument">
              <stringProp name="Argument.name">randomPassword</stringProp>
              <stringProp name="Argument.value">${__RandomString(10,abcdefghijklmnop,randomString)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="randomPhone" elementType="Argument">
              <stringProp name="Argument.name">randomPhone</stringProp>
              <stringProp name="Argument.value">+375${__RandomString(9,1234567890,randomString)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="randomUserStatus" elementType="Argument">
              <stringProp name="Argument.name">randomUserStatus</stringProp>
              <stringProp name="Argument.value">${__Random(1,5)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="updatedUserId" elementType="Argument">
              <stringProp name="Argument.name">updatedUserId</stringProp>
              <stringProp name="Argument.value">${__Random(1,100)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="updatedName" elementType="Argument">
              <stringProp name="Argument.name">updatedName</stringProp>
              <stringProp name="Argument.value">alan${__RandomString(5,abcdefghijklmnop,randomString)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="updatedFirstName" elementType="Argument">
              <stringProp name="Argument.name">updatedFirstName</stringProp>
              <stringProp name="Argument.value">john${__RandomString(7,abcdefghijklmnop,randomString)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="userNotFoundMsg" elementType="Argument">
              <stringProp name="Argument.name">userNotFoundMsg</stringProp>
              <stringProp name="Argument.value">User not found</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create user">
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">${baseUrl}/user</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: ${randomUserId},&#xd;
  &quot;username&quot;: &quot;${randomName}&quot;,&#xd;
  &quot;firstName&quot;: &quot;${randomFirstname}&quot;,&#xd;
  &quot;lastName&quot;: &quot;${randomLastname}&quot;,&#xd;
  &quot;email&quot;: &quot;${randomEmail}&quot;,&#xd;
  &quot;password&quot;: &quot;${randomPassword}&quot;,&#xd;
  &quot;phone&quot;: &quot;${randomPhone}&quot;,&#xd;
  &quot;userStatus&quot;: ${randomUserStatus}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check response">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonOutput
import groovy.json.JsonSlurper

    def response = prev.getResponseDataAsString()

    def jsonSlurper = new JsonSlurper()
    def parsedJson = jsonSlurper.parseText(response)
    def prettyJson = JsonOutput.prettyPrint(JsonOutput.toJson(parsedJson))
    prev.setResponseData(prettyJson, &quot;UTF-8&quot;)
       </stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Read user">
          <stringProp name="LoopController.loops">2</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Read user">
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${baseUrl}/user/${randomName}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonOutput
import groovy.json.JsonSlurper

    def response = prev.getResponseDataAsString()

    def jsonSlurper = new JsonSlurper()
    def parsedJson = jsonSlurper.parseText(response)
    def prettyJson = JsonOutput.prettyPrint(JsonOutput.toJson(parsedJson))
    prev.setResponseData(prettyJson, &quot;UTF-8&quot;)
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update user">
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">${baseUrl}/user/${respUsername}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: ${updatedUserId},&#xd;
  &quot;username&quot;: &quot;${updatedName}&quot;,&#xd;
  &quot;firstName&quot;: &quot;${updatedFirstName}&quot;,&#xd;
  &quot;lastName&quot;: &quot;Tarantino&quot;,&#xd;
  &quot;email&quot;: &quot;hollywood@gmail.com&quot;,&#xd;
  &quot;password&quot;: &quot;123456&quot;,&#xd;
  &quot;phone&quot;: &quot;+1243212156&quot;,&#xd;
  &quot;userStatus&quot;: 3&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonOutput
import groovy.json.JsonSlurper

    def response = prev.getResponseDataAsString()

    def jsonSlurper = new JsonSlurper()
    def parsedJson = jsonSlurper.parseText(response)
    
    def prettyJson = JsonOutput.prettyPrint(JsonOutput.toJson(parsedJson))
    prev.setResponseData(prettyJson, &quot;UTF-8&quot;)</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Delete user">
          <stringProp name="LoopController.loops">2</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete user">
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${baseUrl}/user/${updatedName}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonOutput
import groovy.json.JsonSlurper

    def response = prev.getResponseDataAsString()

    def jsonSlurper = new JsonSlurper()
    def parsedJson = jsonSlurper.parseText(response)
    
    def prettyJson = JsonOutput.prettyPrint(JsonOutput.toJson(parsedJson))
    prev.setResponseData(prettyJson, &quot;UTF-8&quot;)</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.custom_message">200</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check user after delete">
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">${baseUrl}/user/${updatedName}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor">
            <stringProp name="JSONPostProcessor.referenceNames">deletedUserMessage</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.message</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import groovy.json.JsonOutput
import groovy.json.JsonSlurper

    def response = prev.getResponseDataAsString()

    def jsonSlurper = new JsonSlurper()
    def parsedJson = jsonSlurper.parseText(response)
    
    def prettyJson = JsonOutput.prettyPrint(JsonOutput.toJson(parsedJson))
    prev.setResponseData(prettyJson, &quot;UTF-8&quot;)

    String var1 = vars.get(&quot;deletedUserMessage&quot;);
    String var2 = vars.get(&quot;userNotFoundMsg&quot;);

  if (var1 != var2) {
    AssertionResult.setFailure(true)
    AssertionResult.setFailureMessage(&quot;Фактический результат не соответсвует ожидаемому: $var1 != $var2&quot;)  
 }
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
